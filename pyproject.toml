[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
dependencies = [
    "PyYAML",
    "attrs >=20.1.0", # https://www.attrs.org/changelog.html#id82
    "html2text",
    "ini2toml",
    "jinja2",
    "nbformat",
    "packaging",
    "pathspec",
    "pip-tools",
    "rtoml", # fast, read-only parsing
    "ruamel.yaml", # better YAML dumping
    "tomlkit", # preserve original TOML formatting
    'more-itertools; python_version <"3.10.0"', # pairwise
    'typing-extensions; python_version <"3.12.0"', # override
]
description = "Pre-commit hooks that ensure that ComPWA repositories have a similar developer set-up"
dynamic = ["version"]
license = {text = "BSD 3-Clause License"}
maintainers = [{email = "compwa-admin@ep1.rub.de"}]
name = "compwa-policy"
requires-python = ">=3.9"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.scripts]
check-dev-files = "compwa_policy.check_dev_files:main"
colab-toc-visible = "compwa_policy.colab_toc_visible:main"
fix-nbformat-version = "compwa_policy.fix_nbformat_version:main"
remove-empty-tags = "compwa_policy.remove_empty_tags:main"
self-check = "compwa_policy.self_check:main"
set-nb-cells = "compwa_policy.set_nb_cells:main"

[project.urls]
Source = "https://github.com/ComPWA/policy"
Tracker = "https://github.com/ComPWA/policy/issues"

[dependency-groups]
dev = [
    "labels",
    "ruff",
    "sphinx-autobuild",
    {include-group = "doc"},
    {include-group = "style"},
    {include-group = "test"},
]
doc = [
    "myst-parser",
    "sphinx",
    "sphinx-api-relink",
    "sphinx-argparse",
    "sphinx-book-theme",
    "sphinx-codeautolink",
    "sphinx-copybutton",
]
style = [
    "mypy",
    {include-group = "types"},
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
types = [
    "pytest",
    "sphinx-api-relink",
    "types-PyYAML",
    "types-toml",
]

[tool.setuptools]
include-package-data = false
license-files = ["LICENSE"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
compwa_policy = [
    ".github/*",
    ".github/**/*",
    ".template/*",
    ".template/.*",
    "py.typed",
]

[tool.setuptools.packages.find]
namespaces = false
where = ["src"]

[tool.setuptools_scm]
write_to = "src/compwa_policy/version.py"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = '.*/compwa_policy/__init__\.py'
files = ["**/*.py"]
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["tests.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["typings.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["ruamel.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["nbformat.*"]

[tool.pyright]
exclude = [
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv/",
    "**/__pycache__",
    "**/_build",
]
reportArgumentType = false
reportGeneralTypeIssues = false
reportIncompatibleMethodOverride = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOverlappingOverload = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportReturnType = false
reportUnboundVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = false
reportUnnecessaryContains = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"
venv = ".venv"
venvPath = "."

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations-min=0",
    "--durations=3",
]
filterwarnings = [
    "error",
    "ignore: Importing ErrorTree directly from the jsonschema package is deprecated.*",
    "ignore: The `hash` argument is deprecated in favor of `unsafe_hash` and will be removed in or after August 2025.:DeprecationWarning",
]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
testpaths = [
    "src",
    "tests",
]

[tool.ruff]
extend-exclude = ["typings"]
preview = true
show-fixes = true
src = [
    "src",
    "tests",
]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "C408",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "PLR0913",
    "PLW1514",
    "PLW2901",
    "PT001",
    "PTH",
    "S301",
    "SIM108",
    "UP036",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["compwa_policy"]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"docs/*" = [
    "E402",
    "INP001",
    "S101",
    "S113",
    "T201",
]
"docs/conf.py" = ["D100"]
"setup.py" = ["D100"]
"tests/*" = [
    "ANN",
    "D",
    "INP001",
    "PGH001",
    "PLC2701",
    "PLR2004",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
    "tool.tox.env_run_base",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
env_list = [
    "cov",
    "doc",
    "linkcheck",
    "sty",
]
no_package = true
requires = ["tox>=4.21.0"]
skip_install = true
skip_missing_interpreters = true

[tool.tox.env_run_base]
allowlist_externals = ["pytest"]
commands = [
    ["pytest", "{posargs}"],
]
description = "Run all unit tests"
pass_env = ["*"]

[tool.tox.env.cov]
allowlist_externals = ["pytest"]
commands = [
    [
        "pytest",
        "{posargs}",
        "--cov-fail-under=33",
        "--cov-report=html",
        "--cov-report=xml",
        "--cov=compwa_policy",
    ],
]
description = "Compute test coverage"

[tool.tox.env.doc]
allowlist_externals = ["sphinx-build"]
commands = [
    [
        "sphinx-build",
        "--builder=html",
        "--fail-on-warning",
        "--keep-going",
        "--show-traceback",
        "docs/",
        "docs/_build/html",
    ],
]
description = "Build documentation and API through Sphinx"

[tool.tox.env.doclive]
allowlist_externals = ["sphinx-autobuild"]
commands = [
    [
        "sphinx-autobuild",
        "--ignore=docs/_build",
        "--ignore=docs/api",
        "--open-browser",
        "--port=0",
        "--re-ignore='.*\\.egg-info'",
        "--re-ignore='.*/__pycache__/.*'",
        "--watch=docs",
        "--watch=src",
        "docs/",
        "docs/_build/html",
    ],
]
description = "Set up a server to directly preview changes to the HTML pages"

[tool.tox.env.linkcheck]
allowlist_externals = ["sphinx-build"]
commands = [
    [
        "sphinx-build",
        "--builder=linkcheck",
        "--show-traceback",
        "docs/",
        "docs/_build/linkcheck",
    ],
]
description = "Check external links in the documentation (requires internet connection)"
set_env = [
    {PYTHONWARNINGS = ""},
]

[tool.tox.env.sty]
allowlist_externals = ["pre-commit"]
commands = [
    ["pre-commit", "run", "--all-files", "{posargs}"],
]
description = "Perform all linting, formatting, and spelling checks"

[tool.uv]
constraint-dependencies = [
    "pygments!=2.19.*", # https://github.com/felix-hilden/sphinx-codeautolink/issues/152
    "sphinx-codeautolink!=0.16.0",
]
